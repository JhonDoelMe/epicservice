import asyncio
import logging
import os
import pandas as pd
import json
import base64

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    WebAppInfo, # <-- –í–∞–∂–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è Mini App
)
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEET_URL = os.getenv("GOOGLE_SHEET_URL")
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
user_lists = {}


# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) ---
class Form(StatesGroup):
    waiting_for_quantity = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="–ú—ñ–π —Å–ø–∏—Å–æ–∫")]],
    resize_keyboard=True,
)


# --- –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Google Sheets ---
def find_product_by_article(article_number: str) -> dict | None:
    if not GOOGLE_SHEET_URL:
        logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_SHEET_URL –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ.")
        return None
    try:
        # –£–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—è—Ç—É—é –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        df = pd.read_csv(GOOGLE_SHEET_URL, delimiter=',')
        df['–∞—Ä—Ç–∏–∫—É–ª'] = df['–∞—Ä—Ç–∏–∫—É–ª'].astype(str)
        result_row = df[df['–∞—Ä—Ç–∏–∫—É–ª'] == article_number]
        if not result_row.empty:
            return result_row.iloc[0].to_dict()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
        return None
    return None


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---

@dp.message(CommandStart())
async def send_welcome(message: Message):
    await message.answer(
        "üëã *–í—ñ—Ç–∞—é!*\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –∞—Ä—Ç–∏–∫—É–ª.",
        reply_markup=main_keyboard,
    )


# --- –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ ---

@dp.message(F.text == "–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫")
async def new_list_handler(message: Message):
    user_id = message.from_user.id
    user_lists[user_id] = {"list": [], "first_article": None, "allowed_department": None}
    await message.answer(
        "–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫. –¢–µ–ø–µ—Ä —à—É–∫–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞–≤–∞–π—Ç–µ —ó—Ö."
    )


@dp.message(F.text == "–ú—ñ–π —Å–ø–∏—Å–æ–∫")
async def my_list_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App —Å–æ —Å–ø–∏—Å–∫–æ–º."""
    user_id = message.from_user.id
    if user_id not in user_lists or not user_lists[user_id]["list"]:
        await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —ñ –¥–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏.")
        return

    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Mini App
    list_data = user_lists[user_id]["list"]
    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON, –∑–∞—Ç–µ–º –≤ –±–∞–π—Ç—ã, –∑–∞—Ç–µ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –¥–ª—è URL —Å—Ç—Ä–æ–∫—É Base64
    list_data_b64 = base64.urlsafe_b64encode(json.dumps(list_data).encode()).decode()

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –≤–∞—à–∏–º –¥–æ–º–µ–Ω–æ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    web_app_url = f"https://anubis-ua.pp.ua/?start_param={list_data_b64}"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    web_app_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì≤ –í—ñ–¥–∫—Ä–∏—Ç–∏ –º—ñ–π —Å–ø–∏—Å–æ–∫", web_app=WebAppInfo(url=web_app_url))]
    ])

    await message.answer(
        f"–£ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É *{len(list_data)}* –ø–æ–∑–∏—Ü—ñ–π. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏.",
        reply_markup=web_app_keyboard
    )


@dp.callback_query(F.data == "save_list")
async def save_list_callback_handler(callback_query: types.CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ Excel –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = callback_query.from_user.id
    if user_id not in user_lists or not user_lists[user_id]["list"]:
        await callback_query.message.answer("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω—ñ—á–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏.")
        await callback_query.answer()
        return

    user_data = user_lists[user_id]
    df_list = pd.DataFrame(user_data["list"])
    file_name = f"{str(user_data['first_article'])[:4]}.xlsx"

    try:
        df_list.to_excel(file_name, index=False, header=False)
        document = FSInputFile(file_name)
        await callback_query.message.answer_document(
            document, caption=f"–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ: *{file_name}*"
        )
        del user_lists[user_id]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        await callback_query.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É.")
    finally:
        if os.path.exists(file_name):
            os.remove(file_name)
    await callback_query.answer("–°–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")


# --- –ü–æ–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ ---

@dp.callback_query(F.data.startswith("add_to_list_"))
async def add_to_list_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–¥–µ–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    user_id = callback_query.from_user.id
    article_to_add = callback_query.data.split("_")[-1]
    product_data = find_product_by_article(article_to_add)

    if not product_data:
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    if user_id in user_lists:
        allowed_department = user_lists[user_id].get("allowed_department")
        if allowed_department is not None and product_data.get("–≤—ñ–¥–¥—ñ–ª") != allowed_department:
            await callback_query.answer(
                f"–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ! –£—Å—ñ —Ç–æ–≤–∞—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑ –≤—ñ–¥–¥—ñ–ª—É {allowed_department}.",
                show_alert=True
            )
            return

    await state.update_data(article_to_add=article_to_add)
    await state.set_state(Form.waiting_for_quantity)
    await callback_query.message.answer(
        f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä—É –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º `{article_to_add}`:"
    )
    await callback_query.answer()


@dp.message(StateFilter(Form.waiting_for_quantity), F.text.isdigit())
async def process_quantity(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ—Ç–¥–µ–ª, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä."""
    user_id = message.from_user.id
    quantity = int(message.text)
    data = await state.get_data()
    article = data.get("article_to_add")

    if not article:
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∑–Ω–æ–≤—É.")
        await state.clear()
        return

    if user_id not in user_lists:
        user_lists[user_id] = {"list": [], "first_article": None, "allowed_department": None}

    if not user_lists[user_id]["list"]:
        product_data = find_product_by_article(article)
        if product_data:
            user_lists[user_id]["allowed_department"] = product_data.get("–≤—ñ–¥–¥—ñ–ª")
        user_lists[user_id]["first_article"] = article

    user_lists[user_id]["list"].append({"–∞—Ä—Ç–∏–∫—É–ª": article, "–∫—ñ–ª—å–∫—ñ—Å—Ç—å": quantity})
    await message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º `{article}` —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ *{quantity}* –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É."
    )
    await state.clear()


@dp.message(F.text.isdigit())
async def search_article_handler(message: Message):
    """–ò—â–µ—Ç –∞—Ä—Ç–∏–∫—É–ª –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫."""
    product_data = find_product_by_article(message.text)
    if product_data:
        response_text = (
            f"‚úÖ *–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä*\n\n"
            f"üè¢ *–í—ñ–¥–¥—ñ–ª:* {product_data.get('–≤—ñ–¥–¥—ñ–ª', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÇ *–ì—Ä—É–ø–∞:* {product_data.get('–≥—Ä—É–ø–∞', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìù *–ù–∞–∑–≤–∞:* {product_data.get('–Ω–∞–∑–≤–∞', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì¶ *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ:* {product_data.get('–∫—ñ–ª—å–∫—ñ—Å—Ç—å', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"
        )
        add_button = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üõí –î–æ–¥–∞—Ç–∏ –≤ —Å–ø–∏—Å–æ–∫", callback_data=f"add_to_list_{product_data.get('–∞—Ä—Ç–∏–∫—É–ª')}")]]
        )
        await message.answer(response_text, reply_markup=add_button)
    else:
        await message.answer(f"‚ùå *–¢–æ–≤–∞—Ä –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º `{message.text}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ*")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
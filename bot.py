import asyncio
import logging
import os
import pandas as pd

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# –ß–∏—Ç–∞–µ–º URL –∏–∑ .env —Ñ–∞–π–ª–∞
GOOGLE_SHEET_URL = os.getenv("GOOGLE_SHEET_URL")
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_lists = {}


# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ---
class Form(StatesGroup):
    waiting_for_quantity = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="–ú—ñ–π —Å–ø–∏—Å–æ–∫")]],
    resize_keyboard=True,
)


# --- –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Google Sheets –ø–æ —Å—Å—ã–ª–∫–µ ---
def find_product_by_article(article_number: str) -> dict | None:
    """–ò—â–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π Google –¢–∞–±–ª–∏—Ü–µ."""
    if not GOOGLE_SHEET_URL:
        logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_SHEET_URL –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ.")
        return None
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Google Sheets –ø–æ —Å—Å—ã–ª–∫–µ, —É–∫–∞–∑—ã–≤–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        df = pd.read_csv(GOOGLE_SHEET_URL, delimiter=',')
        
        df['–∞—Ä—Ç–∏–∫—É–ª'] = df['–∞—Ä—Ç–∏–∫—É–ª'].astype(str)
        result_row = df[df['–∞—Ä—Ç–∏–∫—É–ª'] == article_number]
        if not result_row.empty:
            return result_row.iloc[0].to_dict()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
        return None
    return None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---

@dp.message(CommandStart())
async def send_welcome(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await message.answer(
        "üëã *–í—ñ—Ç–∞—é!*\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –∞—Ä—Ç–∏–∫—É–ª.",
        reply_markup=main_keyboard,
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ ---

@dp.message(F.text == "–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫")
async def new_list_handler(message: Message):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π (–ø—É—Å—Ç–æ–π) —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    user_lists[user_id] = {"list": [], "first_article": None}
    await message.answer(
        "–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫. –¢–µ–ø–µ—Ä —à—É–∫–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞–≤–∞–π—Ç–µ —ó—Ö."
    )


@dp.message(F.text == "–ú—ñ–π —Å–ø–∏—Å–æ–∫")
async def my_list_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    if user_id not in user_lists or not user_lists[user_id]["list"]:
        await message.answer(
            "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —ñ –¥–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏."
        )
        return

    list_items = user_lists[user_id]["list"]
    response_lines = ["*–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫:*\n"]
    for i, item in enumerate(list_items, 1):
        response_lines.append(
            f"{i}. –ê—Ä—Ç–∏–∫—É–ª: `{item['–∞—Ä—Ç–∏–∫—É–ª']}`, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: *{item['–∫—ñ–ª—å–∫—ñ—Å—Ç—å']}*"
        )

    response_text = "\n".join(response_lines)

    save_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Å–ø–∏—Å–æ–∫ —É —Ñ–∞–π–ª", callback_data="save_list"
                )
            ]
        ]
    )

    await message.answer(response_text, reply_markup=save_button)


@dp.callback_query(F.data == "save_list")
async def save_list_callback_handler(callback_query: types.CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ Excel –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = callback_query.from_user.id
    if user_id not in user_lists or not user_lists[user_id]["list"]:
        await callback_query.message.answer("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω—ñ—á–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏.")
        await callback_query.answer()
        return

    user_data = user_lists[user_id]
    df_list = pd.DataFrame(user_data["list"])
    file_name = f"{str(user_data['first_article'])[:4]}.xlsx"

    try:
        df_list.to_excel(file_name, index=False, header=False)

        document = FSInputFile(file_name)
        await callback_query.message.answer_document(
            document, caption=f"–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ: *{file_name}*"
        )

        del user_lists[user_id]

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        await callback_query.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É.")
    finally:
        if os.path.exists(file_name):
            os.remove(file_name)

    await callback_query.answer("–°–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")


# --- –ü–æ–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ ---

@dp.callback_query(F.data.startswith("add_to_list_"))
async def add_to_list_callback_handler(
    callback_query: types.CallbackQuery, state: FSMContext
):
    """–õ–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫' –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    article_to_add = callback_query.data.split("_")[-1]
    await state.update_data(article_to_add=article_to_add)
    await state.set_state(Form.waiting_for_quantity)
    await callback_query.message.answer(
        f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä—É –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º `{article_to_add}`:"
    )
    await callback_query.answer()


@dp.message(StateFilter(Form.waiting_for_quantity), F.text.isdigit())
async def process_quantity(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    user_id = message.from_user.id
    quantity = int(message.text)
    data = await state.get_data()
    article = data.get("article_to_add")

    if not article:
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∑–Ω–æ–≤—É.")
        await state.clear()
        return

    if user_id not in user_lists:
        user_lists[user_id] = {"list": [], "first_article": None}

    user_lists[user_id]["list"].append({"–∞—Ä—Ç–∏–∫—É–ª": article, "–∫—ñ–ª—å–∫—ñ—Å—Ç—å": quantity})

    if not user_lists[user_id]["first_article"]:
        user_lists[user_id]["first_article"] = article

    await message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º `{article}` —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ *{quantity}* –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É."
    )

    await state.clear()


@dp.message(F.text.isdigit())
async def search_article_handler(message: Message):
    """–ò—â–µ—Ç –∞—Ä—Ç–∏–∫—É–ª –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫."""
    product_data = find_product_by_article(message.text)

    if product_data:
        response_text = (
            f"‚úÖ *–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä*\n\n"
            f"üè¢ *–í—ñ–¥–¥—ñ–ª:* {product_data.get('–≤—ñ–¥–¥—ñ–ª', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÇ *–ì—Ä—É–ø–∞:* {product_data.get('–≥—Ä—É–ø–∞', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìù *–ù–∞–∑–≤–∞:* {product_data.get('–Ω–∞–∑–≤–∞', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì¶ *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ:* {product_data.get('–∫—ñ–ª—å–∫—ñ—Å—Ç—å', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"
        )
        add_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üõí –î–æ–¥–∞—Ç–∏ –≤ —Å–ø–∏—Å–æ–∫",
                        callback_data=f"add_to_list_{product_data.get('–∞—Ä—Ç–∏–∫—É–ª')}",
                    )
                ]
            ]
        )
        await message.answer(response_text, reply_markup=add_button)
    else:
        await message.answer(f"‚ùå *–¢–æ–≤–∞—Ä –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º `{message.text}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ*")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
import asyncio
import logging
import os

import pandas as pd
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties # <-- 1. –ù–û–í–´–ô –ò–ú–ü–û–†–¢
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CSV_FILE_PATH = "data.csv"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ parse_mode
# <-- 2. –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ ---
def find_product_by_article(article_number: str) -> dict | None:
    """
    –ò—â–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –≤ CSV-—Ñ–∞–π–ª–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    try:
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª, —É–∫–∞–∑–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
        df = pd.read_csv(CSV_FILE_PATH, delimiter=';')
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É '–∞—Ä—Ç–∏–∫—É–ª' –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        df['–∞—Ä—Ç–∏–∫—É–ª'] = df['–∞—Ä—Ç–∏–∫—É–ª'].astype(str)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ '–∞—Ä—Ç–∏–∫—É–ª' —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º
        result_row = df[df['–∞—Ä—Ç–∏–∫—É–ª'] == article_number]
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        if not result_row.empty:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
            return result_row.iloc[0].to_dict()
            
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {CSV_FILE_PATH}")
        return None
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return None
        
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ö–µ–Ω–¥–ª–µ—Ä—ã) ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start."""
    await message.answer(
        "üëã *–í—ñ—Ç–∞—é!*\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–º.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —á–∏—Å–ª–æ–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª, —ñ —è –∑–Ω–∞–π–¥—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–Ω–∞—à –∞—Ä—Ç–∏–∫—É–ª)
@dp.message(F.text.isdigit())
async def search_article_handler(message: types.Message):
    """–ò—â–µ—Ç –∞—Ä—Ç–∏–∫—É–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    article_to_find = message.text
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —à—É–∫–∞—î –∞—Ä—Ç–∏–∫—É–ª: {article_to_find}")
    
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä
    product_data = find_product_by_article(article_to_find)
    
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω
    if product_data:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        response_text = (
            f"‚úÖ *–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä –∑–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–º {product_data['–∞—Ä—Ç–∏–∫—É–ª']}*\n\n"
            f"üè¢ *–í—ñ–¥–¥—ñ–ª:* {product_data['–≤—ñ–¥–¥—ñ–ª']}\n"
            f"üìÇ *–ì—Ä—É–ø–∞:* {product_data['–≥—Ä—É–ø–∞']}\n"
            f"üìù *–ù–∞–∑–≤–∞:* {product_data['–Ω–∞–∑–≤–∞']}\n"
            f"üì¶ *–ö—ñ–ª—å–∫—ñ—Å—Ç—å:* {product_data['–∫—ñ–ª—å–∫—ñ—Å—Ç—å']}"
        )
        await message.answer(response_text)
    else:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        await message.answer(
            f"‚ùå *–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ*\n\n"
            f"–ù–∞ –∂–∞–ª—å, —Ç–æ–≤–∞—Ä –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º `{article_to_find}` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –±–∞–∑—ñ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message()
async def handle_other_text(message: types.Message):
    """–°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–æ."""
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å *—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª* —Ç–æ–≤–∞—Ä—É.")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await dp.start_polling(bot)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main
    asyncio.run(main())
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from database.orm import orm_find_products, orm_get_product_by_id
from keyboards.inline import get_search_results_kb, get_add_to_list_kb

router = Router()

# –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä, —â–æ–± —Ü–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ —Ä–µ–∞–≥—É–≤–∞–≤ –Ω–∞ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
@router.message(F.text.as_("text"))
async def search_handler(message: Message, text: str):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –ø–æ—à—É–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∏."""
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ –∑–∞–ø–∏—Ç–∏
    if text.startswith('/') or len(text) < 4:
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–µ–∫—Å—Ç –Ω–µ —î –æ–¥–Ω—ñ—î—é –∑ –Ω–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥-–∫–Ω–æ–ø–æ–∫
    known_commands = ["–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫", "–ú—ñ–π —Å–ø–∏—Å–æ–∫", "üóÇÔ∏è –ê—Ä—Ö—ñ–≤ —Å–ø–∏—Å–∫—ñ–≤", "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"]
    if text in known_commands:
        return

    products = await orm_find_products(text)
    
    if not products:
        await message.answer("–ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    if len(products) == 1:
        product = products[0]
        await show_product_card(message, product)
    else:
        await message.answer(
            "–ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π:",
            reply_markup=get_search_results_kb(products)
        )

@router.callback_query(F.data.startswith("product:"))
async def show_product_from_button(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –∫–∞—Ä—Ç–∫—É —Ç–æ–≤–∞—Ä—É –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ID)."""
    product_id = int(callback.data.split(":", 1)[1])
    product = await orm_get_product_by_id(product_id)
    
    if product:
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –±–µ–∑–ª–∞–¥—É
        await callback.message.edit_reply_markup(reply_markup=None)
        await show_product_card(callback.message, product)
    
    await callback.answer()

async def show_product_card(message: Message, product):
    """–§–æ—Ä–º—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–∞—Ä—Ç–∫—É —Ç–æ–≤–∞—Ä—É."""
    card_text = (
        f"‚úÖ *–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä*\n\n"
        f"üìù *–ù–∞–∑–≤–∞:* {product.–Ω–∞–∑–≤–∞}\n"
        f"üè¢ *–í—ñ–¥–¥—ñ–ª:* {product.–≤—ñ–¥–¥—ñ–ª}\n"
        f"üìÇ *–ì—Ä—É–ø–∞:* {product.–≥—Ä—É–ø–∞}\n"
        f"üì¶ *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ:* {product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å}\n"
        f"üõí *–í—ñ–¥–∫–ª–∞–¥–µ–Ω–æ:* {product.–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ}"
    )
    await message.answer(
        card_text,
        reply_markup=get_add_to_list_kb(product.id)
    )
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message

from database.engine import async_session
from database.orm import orm_find_products, orm_get_product_by_id
from keyboards.inline import get_product_actions_kb, get_search_results_kb

router = Router()

def format_quantity(quantity_str: str):
    """–§–æ—Ä–º–∞—Ç—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ .0 –¥–ª—è —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª."""
    try:
        quantity_float = float(quantity_str)
        return int(quantity_float) if quantity_float.is_integer() else quantity_float
    except (ValueError, TypeError):
        return quantity_str

@router.message(F.text.as_("text"))
async def search_handler(message: Message, text: str):
    known_commands = ["–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫", "–ú—ñ–π —Å–ø–∏—Å–æ–∫", "üóÇÔ∏è –ê—Ä—Ö—ñ–≤ —Å–ø–∏—Å–∫—ñ–≤", "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"]
    if text.startswith('/') or text in known_commands:
        return

    if len(text) < 3:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–ª—è –ø–æ—à—É–∫—É –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return

    products = await orm_find_products(text)
    
    if not products:
        await message.answer("–ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    if len(products) == 1:
        # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, –≤—ñ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –π–æ–≥–æ –∫–∞—Ä—Ç–∫—É
        await show_product_card(message, products[0])
    else:
        # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞, –¥–∞—î–º–æ –≤–∏–±—ñ—Ä
        await message.answer(
            "–ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π:",
            reply_markup=get_search_results_kb(products)
        )

@router.callback_query(F.data.startswith("product:"))
async def show_product_from_button(callback: CallbackQuery):
    product_id = int(callback.data.split(":", 1)[1])
    
    async with async_session() as session:
        product = await orm_get_product_by_id(session, product_id)
        if product:
            # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—à—É–∫—É
            await callback.message.edit_reply_markup(reply_markup=None)
            await show_product_card(callback.message, product)
    
    await callback.answer()

async def show_product_card(message: Message, product):
    """
    –§–æ—Ä–º—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–∞—Ä—Ç–∫—É —Ç–æ–≤–∞—Ä—É –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –¥—ñ–π.

    :param message: –û–±'—î–∫—Ç Message –∞–±–æ CallbackQuery.message, –∫—É–¥–∏ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    :param product: –û–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    """
    try:
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É
        stock_quantity = float(product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å)
        reserved_quantity = product.–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ or 0
        available_quantity = stock_quantity - reserved_quantity
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (15.0 -> 15)
        display_available = format_quantity(str(available_quantity))
        int_available = int(available_quantity)
    except (ValueError, TypeError):
        # –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∫–∞–∑–∞–Ω–∞ —è–∫ —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–±–∞–≥–∞—Ç–æ")
        display_available = product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å
        int_available = 0

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–∫–∏
    card_text = (
        f"‚úÖ *–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä*\n\n"
        f"üìù *–ù–∞–∑–≤–∞:* {product.–Ω–∞–∑–≤–∞}\n"
        f"üè¢ *–í—ñ–¥–¥—ñ–ª:* {product.–≤—ñ–¥–¥—ñ–ª}\n"
        f"üìÇ *–ì—Ä—É–ø–∞:* {product.–≥—Ä—É–ø–∞}\n"
        f"üì¶ *–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–±–∏—Ä–∞–Ω–Ω—è:* {display_available}\n"
        f"üõí *–í–∂–µ –∑—ñ–±—Ä–∞–Ω–æ:* {product.–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ or 0}"
    )
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–∞—Ä—Ç–∫—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ "–î–æ–¥–∞—Ç–∏ –≤—Å–µ" —Ç–∞ "–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å"
    await message.answer(
        card_text,
        reply_markup=get_product_actions_kb(product.id, int_available)
    )
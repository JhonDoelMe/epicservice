import logging
from typing import Optional, Union

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from sqlalchemy.exc import SQLAlchemyError

from database.engine import async_session
from database.orm import (orm_find_products, orm_get_product_by_id,
                          orm_get_temp_list_item_quantity)
from keyboards.inline import get_product_actions_kb, get_search_results_kb
from lexicon.lexicon import LEXICON

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

router = Router()

def format_quantity(quantity_str: str) -> Union[int, float, str]:
    """–§–æ—Ä–º–∞—Ç—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ .0 –¥–ª—è —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª"""
    try:
        quantity_float = float(quantity_str)
        return int(quantity_float) if quantity_float.is_integer() else quantity_float
    except (ValueError, TypeError) as e:
        logger.debug("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ '%s': %s", quantity_str, e)
        return quantity_str

@router.message(F.text.as_("text"))
async def search_handler(message: Message, text: str) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤"""
    known_commands = {"–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫", "–ú—ñ–π —Å–ø–∏—Å–æ–∫", "üóÇÔ∏è –ê—Ä—Ö—ñ–≤ —Å–ø–∏—Å–∫—ñ–≤", "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"}
    
    if text.startswith("/") or text in known_commands:
        return

    if len(text) < 3:
        await message.answer(LEXICON.SEARCH_TOO_SHORT)
        return

    try:
        products = await orm_find_products(text)
        if not products:
            await message.answer(LEXICON.SEARCH_NO_RESULTS)
            return

        if len(products) == 1:
            await show_product_card(message, products[0])
        else:
            await message.answer(
                LEXICON.SEARCH_MANY_RESULTS,
                reply_markup=get_search_results_kb(products),
            )
    except SQLAlchemyError as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è '%s': %s", text, e)
        await message.answer(LEXICON.UNEXPECTED_ERROR)

@router.callback_query(F.data.startswith("product:"))
async def show_product_from_button(callback: CallbackQuery) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑ –≤–∏–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä—É"""
    try:
        product_id = int(callback.data.split(":", 1)[1])
        
        async with async_session() as session:
            product = await orm_get_product_by_id(session, product_id)
            if product:
                await callback.message.edit_reply_markup(reply_markup=None)
                await show_product_card(callback.message, product)
            else:
                logger.warning("–¢–æ–≤–∞—Ä –∑ ID %s –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", product_id)
                await callback.answer(LEXICON.PRODUCT_NOT_FOUND, show_alert=True)
    except ValueError as e:
        logger.error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç product_id: %s", e)
        await callback.answer(LEXICON.UNEXPECTED_ERROR, show_alert=True)
    except SQLAlchemyError as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ë–î –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: %s", e)
        await callback.answer(LEXICON.UNEXPECTED_ERROR, show_alert=True)
    finally:
        await callback.answer()

async def show_product_card(message: Message, product) -> None:
    """–§–æ—Ä–º—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–∞—Ä—Ç–∫—É —Ç–æ–≤–∞—Ä—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–µ–∑–µ—Ä–≤—É"""
    user_id = message.chat.id
    
    try:
        in_temp_list_quantity = await orm_get_temp_list_item_quantity(user_id, product.id)
        
        try:
            stock_quantity = float(product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å)
            permanently_reserved = product.–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ or 0
            
            available_quantity = stock_quantity - permanently_reserved - in_temp_list_quantity
            total_reserved = permanently_reserved + in_temp_list_quantity

            display_available = format_quantity(str(available_quantity))
            int_available = max(0, int(available_quantity))  # –ù–µ –≤—ñ–¥'—î–º–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            display_total_reserved = format_quantity(str(total_reserved))

        except (ValueError, TypeError):
            display_available = product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å
            int_available = 0
            display_total_reserved = (product.–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ or 0) + in_temp_list_quantity

        card_text = LEXICON.PRODUCT_CARD_TEMPLATE.format(
            name=product.–Ω–∞–∑–≤–∞,
            department=product.–≤—ñ–¥–¥—ñ–ª,
            group=product.–≥—Ä—É–ø–∞,
            available=display_available,
            reserved=display_total_reserved,
        )

        await message.answer(
            card_text, 
            reply_markup=get_product_actions_kb(product.id, int_available)
        )
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ —Ç–æ–≤–∞—Ä—É %s: %s", product.id, e)
        await message.answer(LEXICON.UNEXPECTED_ERROR)
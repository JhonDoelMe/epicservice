# epicservice/handlers/admin/core.py

import asyncio
import logging
from typing import Union

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
# --- –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç FSMContext ---
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from config import ADMIN_IDS
from database.orm import orm_delete_all_saved_lists_sync
from keyboards.inline import get_admin_panel_kb, get_confirmation_kb
from lexicon.lexicon import LEXICON

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä, —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –¥–ª—è —Ü—å–æ–≥–æ –±–ª–æ–∫—É –∞–¥–º—ñ–Ω-—Ñ—É–Ω–∫—Ü—ñ–π
router = Router()
# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä, —â–æ–± —Ü—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Ä–µ–∞–≥—É–≤–∞–ª–∏ –ª–∏—à–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ–≤
router.message.filter(F.from_user.id.in_(ADMIN_IDS))
router.callback_query.filter(F.from_user.id.in_(ADMIN_IDS))


# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏ FSM, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —É —Ü—å–æ–º—É –º–æ–¥—É–ª—ñ
class AdminCoreStates(StatesGroup):
    confirm_delete_all_lists = State()


# --- –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø ---
async def _show_admin_panel(event: Union[Message, CallbackQuery]):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ, —Ä–µ–¥–∞–≥—É—é—á–∏ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—é—á–∏ –Ω–æ–≤–µ.
    """
    text = LEXICON.ADMIN_PANEL_GREETING
    reply_markup = get_admin_panel_kb()

    if isinstance(event, Message):
        await event.answer(text, reply_markup=reply_markup)
    elif isinstance(event, CallbackQuery):
        try:
            await event.message.edit_text(text, reply_markup=reply_markup)
        except TelegramBadRequest:
            # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–æ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ),
            # –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ.
            await event.message.delete()
            await event.message.answer(text, reply_markup=reply_markup)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤—Ö–æ–¥—É –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å ---

@router.message(F.text == "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å' –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤—É –¥–æ–ø–æ–º—ñ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ.
    """
    await _show_admin_panel(message)


@router.callback_query(F.data == "admin:main")
async def admin_panel_callback_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ'.
    –°–∫–∏–¥–∞—î —Å—Ç–∞–Ω FSM —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω–∫–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ö–µ–ª–ø–µ—Ä–∞.
    """
    await state.clear()
    await _show_admin_panel(callback)
    await callback.answer()


# --- –°—Ü–µ–Ω–∞—Ä—ñ–π –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–∏—Å–∫—ñ–≤ ---

@router.callback_query(F.data == "admin:delete_all_lists")
async def delete_all_lists_confirm_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä—à–∏–π –∫—Ä–æ–∫ —Å—Ü–µ–Ω–∞—Ä—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è. –ó–∞–ø–∏—Ç—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    await callback.message.edit_text(
        LEXICON.DELETE_ALL_LISTS_CONFIRM,
        reply_markup=get_confirmation_kb(
            "confirm_delete_all_yes", "confirm_delete_all_no"
        ),
    )
    await state.set_state(AdminCoreStates.confirm_delete_all_lists)
    await callback.answer()


@router.callback_query(AdminCoreStates.confirm_delete_all_lists, F.data == "confirm_delete_all_yes")
async def delete_all_lists_confirmed_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ–∑–∏—Ç–∏–≤–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –í–∏–∫–ª–∏–∫–∞—î ORM-—Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î callback.answer –¥–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    """
    await state.clear()

    # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –±–ª–æ–∫—É—é—á—É –æ–ø–µ—Ä–∞—Ü—ñ—é –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    loop = asyncio.get_running_loop()
    deleted_count = await loop.run_in_executor(None, orm_delete_all_saved_lists_sync)

    if deleted_count > 0:
        # –í–∞–∂–ª–∏–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∫–∞–∑—É—î–º–æ —è–∫ alert (–≤—Å–ø–ª–∏–≤–∞—é—á–µ –≤—ñ–∫–Ω–æ)
        await callback.answer(
            LEXICON.DELETE_ALL_LISTS_SUCCESS.format(count=deleted_count),
            show_alert=True
        )
    else:
        # –ú–µ–Ω—à –≤–∞–∂–ª–∏–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∫–∞–∑—É—î–º–æ —è–∫ "—à—Ç–æ—Ä–∫—É"
        await callback.answer(LEXICON.NO_LISTS_TO_DELETE)

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∞–¥–º—ñ–Ω–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await _show_admin_panel(callback)


@router.callback_query(AdminCoreStates.confirm_delete_all_lists, F.data == "confirm_delete_all_no")
async def delete_all_lists_cancelled_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó. –ü–æ–≤–µ—Ä—Ç–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    await state.clear()
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —É "—à—Ç–æ—Ä—Ü—ñ"
    await callback.answer(LEXICON.DELETE_ALL_LISTS_CANCELLED)
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∞–¥–º—ñ–Ω–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await _show_admin_panel(callback)
# epicservice/handlers/archive.py

import logging

# --- –ó–ú–Ü–ù–ê: –î–æ–¥–∞—î–º–æ F, CallbackQuery —Ç–∞ SQLAlchemyError ---
from aiogram import F, Router
from aiogram.types import CallbackQuery
from sqlalchemy.exc import SQLAlchemyError

from database.orm import orm_get_user_lists_archive
# --- –ó–ú–Ü–ù–ê: –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏, —â–æ –Ω–∞–º –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è ---
from keyboards.inline import get_archive_kb
from lexicon.lexicon import LEXICON
# --- –ó–ú–Ü–ù–ê: –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
from handlers.user.list_management import back_to_main_menu


logger = logging.getLogger(__name__)

router = Router()

# --- –ó–ú–Ü–ù–ê: –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–ø–µ—Ä —Ä–µ–∞–≥—É—î –Ω–∞ callback, –∞ –Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç ---
@router.callback_query(F.data == "main:archive")
async def show_archive_handler(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üóÇÔ∏è –ê—Ä—Ö—ñ–≤ —Å–ø–∏—Å–∫—ñ–≤'.

    –î—ñ—Å—Ç–∞—î –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞,
    —Ñ–æ—Ä–º–∞—Ç—É—î —ó—Ö —É –≤–∏–≥–ª—è–¥—ñ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É,
    —Ä–µ–¥–∞–≥—É—é—á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    user_id = callback.from_user.id
    
    try:
        logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –∑–∞–ø–∏—Ç—É—î —Å–≤—ñ–π –∞—Ä—Ö—ñ–≤.", user_id)
        archived_lists = await orm_get_user_lists_archive(user_id)

        # –Ø–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
        if not archived_lists:
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            await callback.answer(LEXICON.NO_ARCHIVED_LISTS, show_alert=True)
            return

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –∞—Ä—Ö—ñ–≤—ñ–≤
        response_text = [LEXICON.ARCHIVE_TITLE]
        for i, lst in enumerate(archived_lists, 1):
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É
            created_date = lst.created_at.strftime("%d.%m.%Y –æ %H:%M")
            response_text.append(
                LEXICON.ARCHIVE_ITEM.format(
                    i=i, 
                    file_name=lst.file_name, 
                    created_date=created_date
                )
            )
        
        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—é—á–∏ –π–æ–≥–æ –Ω–∞ –µ–∫—Ä–∞–Ω –∞—Ä—Ö—ñ–≤—É
        await callback.message.edit_text(
            "\n".join(response_text), 
            reply_markup=get_archive_kb(user_id)
        )
        await callback.answer()
        
    except SQLAlchemyError as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ë–î –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤—É –¥–ª—è %s: %s", user_id, e, exc_info=True)
        await callback.message.answer(LEXICON.UNEXPECTED_ERROR)
    except Exception as e:
        logger.error("–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –∞—Ä—Ö—ñ–≤—É %s: %s", user_id, e, exc_info=True)
        await callback.message.answer(LEXICON.UNEXPECTED_ERROR)
import logging
from typing import List

from aiogram import F, Router
from aiogram.types import Message
from sqlalchemy.exc import SQLAlchemyError

from database.orm import orm_get_user_lists_archive
from keyboards.inline import get_archive_kb
from lexicon.lexicon import LEXICON

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

router = Router()

@router.message(F.text == "üóÇÔ∏è –ê—Ä—Ö—ñ–≤ —Å–ø–∏—Å–∫—ñ–≤")
async def show_archive_handler(message: Message) -> None:
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –π–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤.
    
    Args:
        message: –û–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    user_id = message.from_user.id
    
    try:
        logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —Å–≤—ñ–π –∞—Ä—Ö—ñ–≤", user_id)
        archived_lists = await orm_get_user_lists_archive(user_id)

        if not archived_lists:
            await message.answer(LEXICON.NO_ARCHIVED_LISTS)
            return

        response_text = LEXICON.ARCHIVE_TITLE
        for i, lst in enumerate(archived_lists, 1):
            created_date = lst.created_at.strftime("%d.%m.%Y –æ %H:%M")
            response_text += LEXICON.ARCHIVE_ITEM.format(
                i=i, 
                file_name=lst.file_name, 
                created_date=created_date
            )

        await message.answer(response_text, reply_markup=get_archive_kb(user_id))
        
    except SQLAlchemyError as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ë–î –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤—É –¥–ª—è %s: %s", user_id, e)
        await message.answer(LEXICON.UNEXPECTED_ERROR)
    except Exception as e:
        logger.error("–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –∞—Ä—Ö—ñ–≤—É %s: %s", user_id, e)
        await message.answer(LEXICON.UNEXPECTED_ERROR)
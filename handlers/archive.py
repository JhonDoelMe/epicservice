import logging

from aiogram import F, Router
from aiogram.types import Message
from sqlalchemy.exc import SQLAlchemyError

from database.orm import orm_get_user_lists_archive
from keyboards.inline import get_archive_kb
from lexicon.lexicon import LEXICON

logger = logging.getLogger(__name__)

router = Router()

@router.message(F.text == LEXICON.BUTTON_ARCHIVE)
async def show_archive_handler(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üóÇÔ∏è –ê—Ä—Ö—ñ–≤ —Å–ø–∏—Å–∫—ñ–≤'.

    –î—ñ—Å—Ç–∞—î –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞,
    —Ñ–æ—Ä–º–∞—Ç—É—î —ó—Ö —É –≤–∏–≥–ª—è–¥—ñ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    —Ä–∞–∑–æ–º —ñ–∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –∞—Ä—Ö—ñ–≤—É —É —Ñ–æ—Ä–º–∞—Ç—ñ ZIP.
    """
    user_id = message.from_user.id
    
    try:
        logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –∑–∞–ø–∏—Ç—É—î —Å–≤—ñ–π –∞—Ä—Ö—ñ–≤.", user_id)
        archived_lists = await orm_get_user_lists_archive(user_id)

        # –Ø–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
        if not archived_lists:
            await message.answer(LEXICON.NO_ARCHIVED_LISTS)
            return

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –∞—Ä—Ö—ñ–≤—ñ–≤
        response_text = [LEXICON.ARCHIVE_TITLE]
        for i, lst in enumerate(archived_lists, 1):
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É
            created_date = lst.created_at.strftime("%d.%m.%Y –æ %H:%M")
            response_text.append(
                LEXICON.ARCHIVE_ITEM.format(
                    i=i, 
                    file_name=lst.file_name, 
                    created_date=created_date
                )
            )

        await message.answer("\n".join(response_text), reply_markup=get_archive_kb(user_id))
        
    except SQLAlchemyError as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ë–î –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤—É –¥–ª—è %s: %s", user_id, e, exc_info=True)
        await message.answer(LEXICON.UNEXPECTED_ERROR)
    except Exception as e:
        logger.error("–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –∞—Ä—Ö—ñ–≤—É %s: %s", user_id, e, exc_info=True)
        await message.answer(LEXICON.UNEXPECTED_ERROR)
import os
import zipfile
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import MagicData

from database.orm import orm_get_user_lists_archive, orm_get_all_files_for_user
from keyboards.inline import get_archive_kb

router = Router()

@router.message(F.text == "üóÇÔ∏è –ê—Ä—Ö—ñ–≤ —Å–ø–∏—Å–∫—ñ–≤")
async def show_archive_handler(message: Message):
    """–ü–æ–∫–∞–∑—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤."""
    user_id = message.from_user.id
    archived_lists = await orm_get_user_lists_archive(user_id)

    if not archived_lists:
        await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤.")
        return

    response_text = "üóÇÔ∏è *–í–∞—à –∞—Ä—Ö—ñ–≤ —Å–ø–∏—Å–∫—ñ–≤:*\n\n"
    for i, lst in enumerate(archived_lists, 1):
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –¥–ª—è –≥–∞—Ä–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É
        created_date = lst.created_at.strftime("%d.%m.%Y –æ %H:%M")
        response_text += f"{i}. `{lst.file_name}` (–≤—ñ–¥ {created_date})\n"

    await message.answer(response_text, reply_markup=get_archive_kb())

@router.callback_query(F.data == "download_all_zip")
async def download_all_zip_handler(callback: CallbackQuery):
    """–ü–∞–∫—É—î –≤—Å—ñ —Ñ–∞–π–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ ZIP-–∞—Ä—Ö—ñ–≤ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –π–æ–≥–æ."""
    user_id = callback.from_user.id
    file_paths = await orm_get_all_files_for_user(user_id)

    if not file_paths:
        await callback.answer("–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó.", show_alert=True)
        return

    await callback.message.edit_text("–ü–æ—á–∞–≤ –ø–∞–∫—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—ñ–≤... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.")

    zip_path = f"archives/user_{user_id}_archive.zip"
    
    try:
        with zipfile.ZipFile(zip_path, 'w') as zf:
            for file_path in file_paths:
                if os.path.exists(file_path):
                    # –î–æ–¥–∞—î–º–æ —Ñ–∞–π–ª –≤ –∞—Ä—Ö—ñ–≤, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç—ñ–ª—å–∫–∏ –π–æ–≥–æ –Ω–∞–∑–≤—É
                    zf.write(file_path, arcname=os.path.basename(file_path))
        
        document = FSInputFile(zip_path)
        await callback.message.answer_document(document, caption="–í–∞—à ZIP-–∞—Ä—Ö—ñ–≤ –∑ —É—Å—ñ–º–∞ —Å–ø–∏—Å–∫–∞–º–∏.")

    except Exception as e:
        await callback.message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤—É: {e}")
    finally:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π ZIP-—Ñ–∞–π–ª
        if os.path.exists(zip_path):
            os.remove(zip_path)

    await callback.answer()
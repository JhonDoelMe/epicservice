import asyncio
import logging
import os
import shutil
import zipfile
from datetime import datetime
from typing import Optional, List, Dict, Any, Set

import pandas as pd
from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, Message
from sqlalchemy.exc import SQLAlchemyError

from config import ADMIN_IDS, ARCHIVES_PATH
from database.orm import (orm_clear_all_reservations, orm_delete_all_saved_lists_sync,
                         orm_get_all_collected_items_sync, orm_get_all_files_for_user,
                         orm_get_all_products_sync, orm_get_all_temp_list_items_sync,
                         orm_get_user_lists_archive, orm_get_users_with_archives,
                         orm_smart_import)
from keyboards.inline import (get_admin_panel_kb, get_archive_kb,
                             get_confirmation_kb, get_users_with_archives_kb)
from keyboards.reply import admin_main_kb, cancel_kb
from lexicon.lexicon import LEXICON

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

router = Router()
router.message.filter(F.from_user.id.in_(ADMIN_IDS))
router.callback_query.filter(F.from_user.id.in_(ADMIN_IDS))

class AdminStates(StatesGroup):
    waiting_for_import_file = State()
    confirm_delete_all_lists = State()

def _validate_excel_columns(df: pd.DataFrame) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ —É Excel —Ñ–∞–π–ª—ñ"""
    required_columns = {"–≤", "–≥", "–Ω", "–∫"}
    return required_columns.issubset(set(df.columns))

def _validate_excel_data(df: pd.DataFrame) -> List[str]:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —É Excel —Ñ–∞–π–ª—ñ"""
    errors = []
    for index, row in df.iterrows():
        if not pd.isna(row["–Ω"]) and (not isinstance(row["–≤"], (int, float)) or pd.isna(row["–≤"])):
            errors.append(f"–†—è–¥–æ–∫ {index + 2}: '–≤—ñ–¥–¥—ñ–ª' –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
        if len(errors) >= 10:
            errors.append("... —Ç–∞ —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏")
            break
    return errors

async def _pack_user_files_to_zip(user_id: int) -> Optional[str]:
    """–°—Ç–≤–æ—Ä—é—î ZIP –∞—Ä—Ö—ñ–≤ –∑ —Ñ–∞–π–ª–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        file_paths = await orm_get_all_files_for_user(user_id)
        if not file_paths:
            return None

        zip_filename = f"user_{user_id}_archive_{datetime.now().strftime('%Y%m%d_%H%M')}.zip"
        zip_path = os.path.join(ARCHIVES_PATH, zip_filename)
        
        os.makedirs(ARCHIVES_PATH, exist_ok=True)
        
        with zipfile.ZipFile(zip_path, 'w') as zipf:
            for file_path in file_paths:
                if os.path.exists(file_path):
                    zipf.write(file_path, os.path.basename(file_path))
        
        return zip_path
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ZIP –∞—Ä—Ö—ñ–≤—É –¥–ª—è %s: %s", user_id, e)
        return None

def _create_stock_report() -> Optional[str]:
    """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø—Ä–æ –∑–∞–ª–∏—à–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤"""
    try:
        products = orm_get_all_products_sync()
        temp_list_items = orm_get_all_temp_list_items_sync()

        temp_reservations = {}
        for item in temp_list_items:
            temp_reservations[item.product_id] = temp_reservations.get(item.product_id, 0) + item.quantity

        report_data = []
        for product in products:
            try:
                stock_qty = float(product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å)
            except (ValueError, TypeError):
                stock_qty = 0

            reserved = (product.–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ or 0) + temp_reservations.get(product.id, 0)
            available = stock_qty - reserved

            report_data.append({
                "–í—ñ–¥–¥—ñ–ª": product.–≤—ñ–¥–¥—ñ–ª,
                "–ì—Ä—É–ø–∞": product.–≥—Ä—É–ø–∞,
                "–ù–∞–∑–≤–∞": product.–Ω–∞–∑–≤–∞,
                "–ó–∞–ª–∏—à–æ–∫": int(available) if available == int(available) else available,
            })

        df = pd.DataFrame(report_data)
        report_path = os.path.join(ARCHIVES_PATH, f"stock_report_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx")
        df.to_excel(report_path, index=False)
        return report_path
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–æ –∑–∞–ª–∏—à–∫–∏: %s", e)
        return None

@router.message(F.text == "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    try:
        await message.answer(
            LEXICON.ADMIN_PANEL_GREETING,
            reply_markup=get_admin_panel_kb()
        )
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ: %s", e)
        await message.answer(LEXICON.UNEXPECTED_ERROR)

@router.callback_query(F.data == "admin:main")
async def admin_panel_callback_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    try:
        if await state.get_state():
            await state.clear()
        await callback.message.edit_text(
            LEXICON.ADMIN_PANEL_GREETING,
            reply_markup=get_admin_panel_kb()
        )
        await callback.answer()
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ: %s", e)
        await callback.answer(LEXICON.UNEXPECTED_ERROR, show_alert=True)

@router.callback_query(F.data == "admin:import_products")
async def start_import_handler(callback: CallbackQuery, state: FSMContext):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—É —ñ–º–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤"""
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            LEXICON.IMPORT_PROMPT,
            reply_markup=cancel_kb
        )
        await state.set_state(AdminStates.waiting_for_import_file)
        await callback.answer()
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —ñ–º–ø–æ—Ä—Ç—É: %s", e)
        await callback.message.answer(LEXICON.UNEXPECTED_ERROR)

@router.message(AdminStates.waiting_for_import_file, F.document)
async def process_import_file(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É"""
    admin_id = message.from_user.id
    file_name = message.document.file_name
    
    if not file_name.endswith(".xlsx"):
        await message.answer(LEXICON.IMPORT_WRONG_FORMAT)
        return

    try:
        await message.answer(LEXICON.IMPORT_PROCESSING, reply_markup=admin_main_kb)
        temp_file = f"temp_import_{admin_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.xlsx"
        await bot.download(message.document, destination=temp_file)
        logger.info("–ê–¥–º—ñ–Ω %s –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ —Ñ–∞–π–ª –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É: %s", admin_id, file_name)

        try:
            df = pd.read_excel(temp_file)
            if not _validate_excel_columns(df):
                await message.answer(LEXICON.IMPORT_INVALID_COLUMNS.format(columns=", ".join(df.columns)))
                return

            errors = _validate_excel_data(df)
            if errors:
                error_msg = LEXICON.IMPORT_VALIDATION_ERRORS_TITLE + "\n".join(errors)
                await message.answer(error_msg)
                return

            await message.answer(LEXICON.IMPORT_STARTING)
            await orm_clear_all_reservations()
            
            result = await orm_smart_import(df)
            await message.answer(result)
            
        except Exception as e:
            logger.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Excel —Ñ–∞–π–ª—É: %s", e)
            await message.answer(LEXICON.IMPORT_CRITICAL_READ_ERROR.format(error=e))
        finally:
            if os.path.exists(temp_file):
                os.remove(temp_file)
                
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: %s", e)
        await message.answer(LEXICON.UNEXPECTED_ERROR)
    finally:
        await state.clear()

@router.message(AdminStates.waiting_for_import_file, F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_import(message: Message, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É —ñ–º–ø–æ—Ä—Ç—É"""
    logger.info("–ê–¥–º—ñ–Ω %s —Å–∫–∞—Å—É–≤–∞–≤ —ñ–º–ø–æ—Ä—Ç", message.from_user.id)
    await state.clear()
    await message.answer(LEXICON.IMPORT_CANCELLED, reply_markup=admin_main_kb)

@router.callback_query(F.data == "admin:user_archives")
async def show_users_archives_list(callback: CallbackQuery):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∞—Ä—Ö—ñ–≤–∞–º–∏"""
    try:
        users = await orm_get_users_with_archives()
        if not users:
            await callback.answer(LEXICON.NO_USERS_WITH_ARCHIVES, show_alert=True)
            return
            
        await callback.message.edit_text(
            LEXICON.CHOOSE_USER_TO_VIEW_ARCHIVE,
            reply_markup=get_users_with_archives_kb(users)
        )
        await callback.answer()
    except SQLAlchemyError as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: %s", e)
        await callback.answer(LEXICON.UNEXPECTED_ERROR, show_alert=True)

@router.callback_query(F.data.startswith("admin:view_user:"))
async def view_user_archive(callback: CallbackQuery):
    """–ü–µ—Ä–µ–≥–ª—è–¥ –∞—Ä—Ö—ñ–≤—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user_id = int(callback.data.split(":")[-1])
        archived_lists = await orm_get_user_lists_archive(user_id)
        
        if not archived_lists:
            await callback.answer(LEXICON.USER_HAS_NO_ARCHIVES, show_alert=True)
            return

        response = LEXICON.USER_ARCHIVE_TITLE.format(user_id=user_id)
        for i, lst in enumerate(archived_lists, 1):
            created_date = lst.created_at.strftime("%d.%m.%Y –æ %H:%M")
            response += LEXICON.ARCHIVE_ITEM.format(
                i=i, file_name=lst.file_name, created_date=created_date
            )

        await callback.message.edit_text(
            response,
            reply_markup=get_archive_kb(user_id, is_admin_view=True)
        )
        await callback.answer()
    except ValueError as e:
        logger.error("–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: %s", e)
        await callback.answer(LEXICON.UNEXPECTED_ERROR, show_alert=True)
    except SQLAlchemyError as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ë–î –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤—É: %s", e)
        await callback.answer(LEXICON.UNEXPECTED_ERROR, show_alert=True)

@router.callback_query(F.data.startswith("download_zip:"))
async def admin_download_zip_handler(callback: CallbackQuery):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ ZIP"""
    try:
        user_id = int(callback.data.split(":")[-1])
        await callback.message.edit_text(LEXICON.PACKING_ARCHIVE.format(user_id=user_id))
        
        zip_path = await _pack_user_files_to_zip(user_id)
        if not zip_path:
            await callback.answer(LEXICON.NO_FILES_TO_ARCHIVE, show_alert=True)
            return

        try:
            document = FSInputFile(zip_path)
            await callback.message.answer_document(
                document,
                caption=LEXICON.ZIP_ARCHIVE_CAPTION.format(user_id=user_id)
            )
        finally:
            if os.path.exists(zip_path):
                os.remove(zip_path)
                
        await callback.answer()
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ZIP –∞—Ä—Ö—ñ–≤—É: %s", e)
        await callback.answer(LEXICON.ZIP_ERROR.format(error=e), show_alert=True)

@router.callback_query(F.data == "admin:export_stock")
async def export_stock_handler(callback: CallbackQuery):
    """–ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—É –ø—Ä–æ –∑–∞–ª–∏—à–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤"""
    try:
        await callback.message.edit_text(LEXICON.EXPORTING_STOCK)
        
        report_path = _create_stock_report()
        if not report_path:
            await callback.message.answer(LEXICON.STOCK_REPORT_ERROR)
            return

        try:
            await callback.message.answer_document(
                FSInputFile(report_path),
                caption=LEXICON.STOCK_REPORT_CAPTION
            )
        finally:
            if os.path.exists(report_path):
                os.remove(report_path)
                
        await callback.message.answer(
            LEXICON.ADMIN_PANEL_GREETING,
            reply_markup=get_admin_panel_kb()
        )
        await callback.answer()
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∑–≤—ñ—Ç—É –ø—Ä–æ –∑–∞–ª–∏—à–∫–∏: %s", e)
        await callback.answer(LEXICON.UNEXPECTED_ERROR, show_alert=True)

@router.callback_query(F.data == "admin:delete_all_lists")
async def delete_all_lists_confirm_handler(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–∏—Å–∫—ñ–≤"""
    try:
        await callback.message.edit_text(
            LEXICON.DELETE_ALL_LISTS_CONFIRM,
            reply_markup=get_confirmation_kb(
                "confirm_delete_all_yes", "confirm_delete_all_no"
            ),
        )
        await state.set_state(AdminStates.confirm_delete_all_lists)
        await callback.answer()
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤: %s", e)
        await callback.answer(LEXICON.UNEXPECTED_ERROR, show_alert=True)

@router.callback_query(AdminStates.confirm_delete_all_lists, F.data == "confirm_delete_all_yes")
async def delete_all_lists_confirmed_handler(callback: CallbackQuery, state: FSMContext):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–∏—Å–∫—ñ–≤ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    try:
        await state.clear()
        admin_id = callback.from_user.id
        logger.warning("–ê–¥–º—ñ–Ω %s —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–∏—Å–∫—ñ–≤", admin_id)
        
        deleted_count = await asyncio.to_thread(orm_delete_all_saved_lists_sync)
        
        if deleted_count > 0:
            await callback.message.edit_text(
                LEXICON.DELETE_ALL_LISTS_SUCCESS.format(count=deleted_count)
            )
        else:
            await callback.message.edit_text(LEXICON.NO_LISTS_TO_DELETE)

        await callback.message.answer(
            LEXICON.ADMIN_PANEL_GREETING,
            reply_markup=get_admin_panel_kb()
        )
        await callback.answer()
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤: %s", e)
        await callback.answer(LEXICON.UNEXPECTED_ERROR, show_alert=True)

@router.callback_query(AdminStates.confirm_delete_all_lists, F.data == "confirm_delete_all_no")
async def delete_all_lists_cancelled_handler(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–∏—Å–∫—ñ–≤"""
    try:
        await state.clear()
        await callback.message.edit_text(LEXICON.DELETE_ALL_LISTS_CANCELLED)
        await callback.message.answer(
            LEXICON.ADMIN_PANEL_GREETING,
            reply_markup=get_admin_panel_kb()
        )
        await callback.answer()
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤: %s", e)
        await callback.answer(LEXICON.UNEXPECTED_ERROR, show_alert=True)
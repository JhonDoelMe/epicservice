import os
import zipfile
import pandas as pd
import asyncio
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_IDS, ARCHIVES_PATH
from keyboards.inline import get_admin_panel_kb, get_users_with_archives_kb, get_archive_kb
from database.orm import (
    orm_smart_import, orm_clear_all_reservations, orm_get_users_with_archives,
    orm_get_user_lists_archive, orm_get_all_files_for_user,
    orm_get_all_products_sync, orm_get_all_temp_list_items_sync
)
from keyboards.reply import admin_main_kb, cancel_kb

router = Router()
router.message.filter(F.from_user.id.in_(ADMIN_IDS))
router.callback_query.filter(F.from_user.id.in_(ADMIN_IDS))

class AdminStates(StatesGroup):
    waiting_for_import_file = State()

@router.message(F.text == "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: Message):
    await message.answer("–í–∏ –≤ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_admin_panel_kb())

@router.callback_query(F.data == "admin:main")
async def admin_panel_callback_handler(callback: CallbackQuery):
    await callback.message.edit_text("–í–∏ –≤ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_admin_panel_kb())
    await callback.answer()

# --- –õ–æ–≥—ñ–∫–∞ —ñ–º–ø–æ—Ä—Ç—É ---
# --- –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –•–ï–ù–î–õ–ï–† ---
@router.callback_query(F.data == "admin:import_products")
async def start_import_handler(callback: CallbackQuery, state: FSMContext):
    # –°–ø–æ—á–∞—Ç–∫—É —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_reply_markup(reply_markup=None)
    # –ü–æ—Ç—ñ–º –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    await callback.message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ñ–∞–π–ª Excel (`.xlsx`) –∑ —Ç–æ–≤–∞—Ä–∞–º–∏.\n\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
        reply_markup=cancel_kb
    )
    await state.set_state(AdminStates.waiting_for_import_file)
    await callback.answer()

@router.message(AdminStates.waiting_for_import_file, F.document)
async def process_import_file(message: Message, state: FSMContext, bot: Bot):
    if not message.document.file_name.endswith('.xlsx'):
        await message.answer("–ü–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ `.xlsx`.")
        return

    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—é —Ñ–∞–π–ª...", reply_markup=admin_main_kb) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—É
    file_path = f"temp_{message.document.file_id}.xlsx"
    await bot.download(message.document, destination=file_path)

    try:
        df = pd.read_excel(file_path)
        expected_columns = ['–≤', '–≥', '–Ω', '–∫']
        if list(df.columns) != expected_columns:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ. –û—á—ñ–∫—É—î—Ç—å—Å—è: `–≤, –≥, –Ω, –∫`, –∞ —É —Ñ–∞–π–ª—ñ: `{', '.join(df.columns)}`")
            os.remove(file_path)
            await state.clear()
            return

        errors = []
        for index, row in df.iterrows():
            if not pd.isna(row['–Ω']) and (not isinstance(row['–≤'], (int, float)) or pd.isna(row['–≤'])):
                errors.append(f"–†—è–¥–æ–∫ {index + 2}: '–≤—ñ–¥–¥—ñ–ª' –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
            if len(errors) > 10:
                errors.append("... —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫.")
                break
        
        if errors:
            await message.answer("‚ùå **–£ —Ñ–∞–π–ª—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–º–∏–ª–∫–∏:**\n\n" + "\n".join(errors))
            os.remove(file_path)
            await state.clear()
            return

    except Exception as e:
        await message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        if os.path.exists(file_path):
            os.remove(file_path)
        await state.clear()
        return

    await message.answer("–§–∞–π–ª –≤–∏–≥–ª—è–¥–∞—î –¥–æ–±—Ä–µ. –ü–æ—á–∏–Ω–∞—é —ñ–º–ø–æ—Ä—Ç —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤—ñ–≤...")
    await orm_clear_all_reservations()
    
    # –£ orm_smart_import –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç–µ–ø–µ—Ä —Å–∞–º DataFrame, –∞ –Ω–µ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    result_message = await orm_smart_import(df)
    await message.answer(result_message)
    await state.clear()
    
    if os.path.exists(file_path):
        os.remove(file_path)

@router.message(AdminStates.waiting_for_import_file, F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_import(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–Ü–º–ø–æ—Ä—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=admin_main_kb)

@router.message(AdminStates.waiting_for_import_file)
async def incorrect_import_file(message: Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª Excel) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏'.")

# --- –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –∞—Ä—Ö—ñ–≤—ñ–≤ ---
@router.callback_query(F.data == "admin:user_archives")
async def show_users_archives_list(callback: CallbackQuery):
    users = await orm_get_users_with_archives()
    if not users:
        await callback.answer("–ñ–æ–¥–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –∑–±–µ—Ä—ñ–≥ —Å–ø–∏—Å–∫—É.", show_alert=True)
        return
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –π–æ–≥–æ –∞—Ä—Ö—ñ–≤—É:", reply_markup=get_users_with_archives_kb(users))
    await callback.answer()

@router.callback_query(F.data.startswith("admin:view_user:"))
async def view_user_archive(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[-1])
    archived_lists = await orm_get_user_lists_archive(user_id)
    if not archived_lists:
        await callback.answer("–£ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤.", show_alert=True)
        return
    
    response_text = f"üóÇÔ∏è *–ê—Ä—Ö—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}`:*\n\n"
    for i, lst in enumerate(archived_lists, 1):
        created_date = lst.created_at.strftime("%d.%m.%Y –æ %H:%M")
        response_text += f"{i}. `{lst.file_name}` (–≤—ñ–¥ {created_date})\n"
        
    await callback.message.edit_text(response_text, reply_markup=get_archive_kb(user_id, is_admin_view=True))
    await callback.answer()

@router.callback_query(F.data.startswith("download_zip:"))
async def admin_download_zip_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[-1])
    file_paths = await orm_get_all_files_for_user(user_id)
    if not file_paths:
        await callback.answer("–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó.", show_alert=True)
        return

    await callback.message.edit_text(f"–ü–æ—á–∞–≤ –ø–∞–∫—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}`...")
    zip_path = os.path.join(ARCHIVES_PATH, f"admin_view_user_{user_id}_archive.zip")
    os.makedirs(ARCHIVES_PATH, exist_ok=True)
    try:
        with zipfile.ZipFile(zip_path, 'w') as zf:
            for file_path in file_paths:
                if os.path.exists(file_path):
                    zf.write(file_path, arcname=os.path.basename(file_path))
        document = FSInputFile(zip_path)
        await callback.message.answer_document(document, caption=f"ZIP-–∞—Ä—Ö—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}`.")
    except Exception as e:
        await callback.message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        if os.path.exists(zip_path):
            os.remove(zip_path)
    await callback.answer()

# --- –û–ë–†–û–ë–ù–ò–ö –î–õ–Ø –ï–ö–°–ü–û–†–¢–£ –ó–ê–õ–ò–®–ö–Ü–í ---
def _sync_export_stock():
    """–ü–æ–≤–Ω—ñ—Å—Ç—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É."""
    products = orm_get_all_products_sync()
    temp_list_items = orm_get_all_temp_list_items_sync()

    temp_reservations = {}
    for item in temp_list_items:
        temp_reservations[item.product_id] = temp_reservations.get(item.product_id, 0) + item.quantity

    export_data = []
    for product in products:
        try:
            stock_quantity = float(product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å)
        except (ValueError, TypeError):
            stock_quantity = 0
        
        permanently_reserved = product.–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ or 0
        temporarily_reserved = temp_reservations.get(product.id, 0)
        final_stock = stock_quantity - permanently_reserved - temporarily_reserved
        
        export_data.append({
            '–í—ñ–¥–¥—ñ–ª': product.–≤—ñ–¥–¥—ñ–ª,
            '–ì—Ä—É–ø–∞': product.–≥—Ä—É–ø–∞,
            '–ù–∞–∑–≤–∞': product.–Ω–∞–∑–≤–∞,
            '–ó–∞–ª–∏—à–æ–∫': final_stock
        })
    
    df = pd.DataFrame(export_data)
    df['–ó–∞–ª–∏—à–æ–∫'] = df['–ó–∞–ª–∏—à–æ–∫'].apply(lambda x: int(x) if x == int(x) else x)

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    file_name = f"stock_balance_{timestamp}.xlsx"
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)
    file_path = os.path.join(temp_dir, file_name)
    
    df.to_excel(file_path, index=False)
    return file_path

@router.callback_query(F.data == "admin:export_stock")
async def export_stock_handler(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –µ–∫—Å–ø–æ—Ä—Ç—É –∑–∞–ª–∏—à–∫—ñ–≤."""
    await callback.message.edit_text("–ü–æ—á–∏–Ω–∞—é —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –ø–æ –∑–∞–ª–∏—à–∫–∞–º...")
    
    loop = asyncio.get_running_loop()
    file_path = await loop.run_in_executor(None, _sync_export_stock)

    if file_path and os.path.exists(file_path):
        document = FSInputFile(file_path)
        await callback.message.answer_document(document, caption="‚úÖ –û—Å—å –≤–∞—à –∑–≤—ñ—Ç –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º –∑–∞–ª–∏—à–∫–∞–º.")
        os.remove(file_path)
    else:
        await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç.")
        
    await callback.message.answer("–í–∏ –≤ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_admin_panel_kb())
    await callback.answer()
import os
import zipfile
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_IDS
from keyboards.inline import get_admin_panel_kb, get_users_with_archives_kb, get_archive_kb
from database.orm import orm_smart_import, orm_clear_all_reservations, orm_get_users_with_archives, orm_get_user_lists_archive, orm_get_all_files_for_user

router = Router()
router.message.filter(F.from_user.id.in_(ADMIN_IDS))
router.callback_query.filter(F.from_user.id.in_(ADMIN_IDS))

class AdminStates(StatesGroup):
    waiting_for_import_file = State()

@router.message(F.text == "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: Message):
    await message.answer("–í–∏ –≤ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_admin_panel_kb())

@router.callback_query(F.data == "admin:main")
async def admin_panel_callback_handler(callback: CallbackQuery):
    await callback.message.edit_text("–í–∏ –≤ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_admin_panel_kb())
    await callback.answer()

# --- –õ–æ–≥—ñ–∫–∞ —ñ–º–ø–æ—Ä—Ç—É (–±–µ–∑ –∑–º—ñ–Ω) ---
@router.callback_query(F.data == "admin:import_products")
async def start_import_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ñ–∞–π–ª Excel (`.xlsx`) –∑ —Ç–æ–≤–∞—Ä–∞–º–∏.")
    await state.set_state(AdminStates.waiting_for_import_file)
    await callback.answer()

@router.message(AdminStates.waiting_for_import_file, F.document)
async def process_import_file(message: Message, state: FSMContext, bot: Bot):
    if not message.document.file_name.endswith('.xlsx'):
        await message.answer("–ü–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ `.xlsx`.")
        return
    await message.answer("–û–±—Ä–æ–±–ª—è—é —Ñ–∞–π–ª...")
    await orm_clear_all_reservations()
    file_path = f"temp_{message.document.file_id}.xlsx"
    await bot.download(message.document, destination=file_path)
    result_message = await orm_smart_import(file_path)
    await message.answer(result_message)
    await state.clear()
    if os.path.exists(file_path):
        os.remove(file_path)

@router.message(AdminStates.waiting_for_import_file)
async def incorrect_import_file(message: Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª Excel).")

# --- –ù–û–í–ê –õ–û–ì–Ü–ö–ê –î–õ–Ø –ü–ï–†–ï–ì–õ–Ø–î–£ –ê–†–•–Ü–í–Ü–í ---
@router.callback_query(F.data == "admin:user_archives")
async def show_users_archives_list(callback: CallbackQuery):
    users = await orm_get_users_with_archives()
    if not users:
        await callback.answer("–ñ–æ–¥–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –∑–±–µ—Ä—ñ–≥ —Å–ø–∏—Å–∫—É.", show_alert=True)
        return
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –π–æ–≥–æ –∞—Ä—Ö—ñ–≤—É:", reply_markup=get_users_with_archives_kb(users))
    await callback.answer()

@router.callback_query(F.data.startswith("admin:view_user:"))
async def view_user_archive(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[-1])
    archived_lists = await orm_get_user_lists_archive(user_id)
    if not archived_lists:
        await callback.answer("–£ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤.", show_alert=True)
        return
    
    response_text = f"üóÇÔ∏è *–ê—Ä—Ö—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}`:*\n\n"
    for i, lst in enumerate(archived_lists, 1):
        created_date = lst.created_at.strftime("%d.%m.%Y –æ %H:%M")
        response_text += f"{i}. `{lst.file_name}` (–≤—ñ–¥ {created_date})\n"
        
    await callback.message.edit_text(response_text, reply_markup=get_archive_kb(user_id, is_admin_view=True))
    await callback.answer()

@router.callback_query(F.data.startswith("download_zip:"))
async def admin_download_zip_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[-1])
    file_paths = await orm_get_all_files_for_user(user_id)
    if not file_paths:
        await callback.answer("–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó.", show_alert=True)
        return

    await callback.message.edit_text(f"–ü–æ—á–∞–≤ –ø–∞–∫—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}`...")
    zip_path = f"archives/admin_view_user_{user_id}_archive.zip"
    try:
        with zipfile.ZipFile(zip_path, 'w') as zf:
            for file_path in file_paths:
                if os.path.exists(file_path):
                    zf.write(file_path, arcname=os.path.basename(file_path))
        document = FSInputFile(zip_path)
        await callback.message.answer_document(document, caption=f"ZIP-–∞—Ä—Ö—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}`.")
    except Exception as e:
        await callback.message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        if os.path.exists(zip_path):
            os.remove(zip_path)
    await callback.answer()
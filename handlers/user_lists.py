import os
import pandas as pd
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from database.orm import (
    orm_get_product_by_id, orm_update_reserved_quantity, orm_add_saved_list,
    orm_clear_temp_list, orm_add_item_to_temp_list, orm_get_temp_list, orm_get_temp_list_department
)
from config import ARCHIVES_PATH

router = Router()

class ListStates(StatesGroup):
    waiting_for_quantity = State()

@router.message(F.text == "–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫")
async def new_list_handler(message: Message):
    await orm_clear_temp_list(message.from_user.id)
    await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫. –¢–µ–ø–µ—Ä —à—É–∫–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞–≤–∞–π—Ç–µ —ó—Ö.")

@router.message(F.text == "–ú—ñ–π —Å–ø–∏—Å–æ–∫")
async def my_list_handler(message: Message):
    user_id = message.from_user.id
    temp_list = await orm_get_temp_list(user_id)
    if not temp_list:
        await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    department_id = temp_list[0].product.–≤—ñ–¥–¥—ñ–ª
    response_lines = [f"*–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ (–í—ñ–¥–¥—ñ–ª: {department_id}):*\n"]
    for i, item in enumerate(temp_list, 1):
        article = item.product.–∞—Ä—Ç–∏–∫—É–ª
        full_name = item.product.–Ω–∞–∑–≤–∞
        response_lines.append(f"{i}. `{article}` ({full_name[len(article)+3:]})\n   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: *{item.quantity}*")
    
    save_button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –≤—ñ–¥–∫–ª–∞—Å—Ç–∏", callback_data="save_list")]])
    await message.answer("\n".join(response_lines), reply_markup=save_button)

@router.callback_query(F.data.startswith("add_to_list:"))
async def add_to_list_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    product_id = int(callback.data.split(":", 1)[1])
    product = await orm_get_product_by_id(product_id)
    if not product:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    allowed_department = await orm_get_temp_list_department(user_id)
    if allowed_department is not None and product.–≤—ñ–¥–¥—ñ–ª != allowed_department:
        await callback.answer(f"–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ! –£—Å—ñ —Ç–æ–≤–∞—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑ –≤—ñ–¥–¥—ñ–ª—É {allowed_department}.", show_alert=True)
        return
    
    await state.update_data(product_id=product_id, product_name=product.–Ω–∞–∑–≤–∞, article=product.–∞—Ä—Ç–∏–∫—É–ª)
    await state.set_state(ListStates.waiting_for_quantity)
    await callback.message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä—É:\n`{product.–Ω–∞–∑–≤–∞}`")
    await callback.answer()

@router.message(ListStates.waiting_for_quantity, F.text.isdigit())
async def process_quantity(message: Message, state: FSMContext):
    quantity = int(message.text)
    data = await state.get_data()
    await orm_add_item_to_temp_list(user_id=message.from_user.id, product_id=data.get("product_id"), quantity=quantity)
    await message.answer(f"–¢–æ–≤–∞—Ä `{data.get('article')}` —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ *{quantity}* –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.")
    await state.clear()

@router.callback_query(F.data == "save_list")
async def save_list_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    temp_list = await orm_get_temp_list(user_id)
    if not temp_list:
        await callback.answer("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", show_alert=True)
        return

    archive_dir = os.path.join(ARCHIVES_PATH, f"user_{user_id}")
    os.makedirs(archive_dir, exist_ok=True)
    
    first_article_name = temp_list[0].product.–∞—Ä—Ç–∏–∫—É–ª
    file_name = f"{first_article_name}.xlsx"
    file_path = os.path.join(archive_dir, file_name)
    
    excel_data = [{'–∞—Ä—Ç–∏–∫—É–ª': item.product.–∞—Ä—Ç–∏–∫—É–ª, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å': item.quantity} for item in temp_list]
    df_list = pd.DataFrame(excel_data)

    try:
        df_list.to_excel(file_path, index=False, header=False)
        items_for_db = [{'article_name': item.product.–Ω–∞–∑–≤–∞, 'quantity': item.quantity} for item in temp_list]
        await orm_add_saved_list(user_id, file_name, file_path, items_for_db)
        
        items_to_reserve = [{'product_id': item.product_id, 'quantity': item.quantity} for item in temp_list]
        await orm_update_reserved_quantity(items_to_reserve)
        
        await orm_clear_temp_list(user_id)
        
        document = FSInputFile(file_path)
        await callback.message.answer_document(document, caption="–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, —Ç–æ–≤–∞—Ä–∏ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ, –∞ —Ñ–∞–π–ª –¥–æ–¥–∞–Ω–æ –¥–æ –∞—Ä—Ö—ñ–≤—É.")
        
    except Exception as e:
        await callback.message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await callback.answer("–°–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
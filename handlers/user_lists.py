import os
import pandas as pd
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from database.orm import orm_get_product_by_id, orm_update_reserved_quantity, orm_add_saved_list

router = Router()
user_lists = {}

class ListStates(StatesGroup):
    waiting_for_quantity = State()

# ... (–∫–æ–¥ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ new_list, my_list, add_to_list, process_quantity –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
@router.message(F.text == "–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫")
async def new_list_handler(message: Message):
    user_id = message.from_user.id
    user_lists[user_id] = {"list": [], "first_article_name": None, "allowed_department": None}
    await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫.")

@router.message(F.text == "–ú—ñ–π —Å–ø–∏—Å–æ–∫")
async def my_list_handler(message: Message):
    user_id = message.from_user.id
    if user_id not in user_lists or not user_lists[user_id]["list"]:
        await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    list_items = user_lists[user_id]["list"]
    department_id = user_lists[user_id]["allowed_department"]
    response_lines = [f"*–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ (–í—ñ–¥–¥—ñ–ª: {department_id}):*\n"]
    for i, item in enumerate(list_items, 1):
        article = item['article_name'].split(' - ')[0]
        response_lines.append(f"{i}. `{article}` ({item['article_name'][len(article)+3:]})\n   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: *{item['quantity']}*")
    response_text = "\n".join(response_lines)
    save_button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –≤—ñ–¥–∫–ª–∞—Å—Ç–∏", callback_data="save_list")]])
    await message.answer(response_text, reply_markup=save_button)

@router.callback_query(F.data.startswith("add_to_list:"))
async def add_to_list_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    product_id = int(callback.data.split(":", 1)[1])
    product = await orm_get_product_by_id(product_id)
    if not product:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    if user_id not in user_lists:
        user_lists[user_id] = {"list": [], "first_article_name": None, "allowed_department": None}
    allowed_department = user_lists[user_id].get("allowed_department")
    if allowed_department is not None and product.–≤—ñ–¥–¥—ñ–ª != allowed_department:
        await callback.answer(f"–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ! –¢–æ–≤–∞—Ä–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –∑ –≤—ñ–¥–¥—ñ–ª—É {allowed_department}.", show_alert=True)
        return
    await state.update_data(product_id=product_id, product_name=product.–Ω–∞–∑–≤–∞)
    await state.set_state(ListStates.waiting_for_quantity)
    await callback.message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä—É:\n`{product.–Ω–∞–∑–≤–∞}`")
    await callback.answer()

@router.message(ListStates.waiting_for_quantity, F.text.isdigit())
async def process_quantity(message: Message, state: FSMContext):
    user_id = message.from_user.id
    quantity = int(message.text)
    data = await state.get_data()
    product_id, product_name = data.get("product_id"), data.get("product_name")
    if not user_lists[user_id]["list"]:
        product = await orm_get_product_by_id(product_id)
        if product:
            user_lists[user_id]["allowed_department"] = product.–≤—ñ–¥–¥—ñ–ª
            user_lists[user_id]["first_article_name"] = product.–Ω–∞–∑–≤–∞.split(' - ')[0]
    user_lists[user_id]["list"].append({"product_id": product_id, "article_name": product_name, "quantity": quantity})
    article_display = product_name.split(' - ')[0]
    await message.answer(f"–¢–æ–≤–∞—Ä `{article_display}` —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ *{quantity}* –¥–æ–¥–∞–Ω–æ.")
    await state.clear()

# --- –û–ù–û–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø ---
@router.callback_query(F.data == "save_list")
async def save_list_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_lists or not user_lists[user_id]["list"]:
        await callback.answer("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", show_alert=True)
        return

    user_data = user_lists[user_id]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∞—Ä—Ö—ñ–≤—ñ–≤, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    archive_dir = f"archives/user_{user_id}"
    os.makedirs(archive_dir, exist_ok=True)
    
    file_name = f"{str(user_data['first_article_name'])}.xlsx"
    file_path = os.path.join(archive_dir, file_name)
    
    excel_data = [{'–∞—Ä—Ç–∏–∫—É–ª': item['article_name'].split(' - ')[0], '–∫—ñ–ª—å–∫—ñ—Å—Ç—å': item['quantity']} for item in user_data["list"]]
    df_list = pd.DataFrame(excel_data)

    try:
        df_list.to_excel(file_path, index=False, header=False)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ñ–∞–π–ª –≤ –ë–î
        await orm_add_saved_list(user_id, file_name, file_path, user_data['list'])
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ '–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ' –≤ –ë–î
        items_to_reserve = [{'product_id': item['product_id'], 'quantity': item['quantity']} for item in user_data['list']]
        await orm_update_reserved_quantity(items_to_reserve)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        document = FSInputFile(file_path)
        await callback.message.answer_document(document, caption="–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, —Ç–æ–≤–∞—Ä–∏ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ, –∞ —Ñ–∞–π–ª –¥–æ–¥–∞–Ω–æ –¥–æ –∞—Ä—Ö—ñ–≤—É.")
        
        del user_lists[user_id]
        
    except Exception as e:
        await callback.message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await callback.answer("–°–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
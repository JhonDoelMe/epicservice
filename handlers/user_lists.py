import os
import pandas as pd
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from database.orm import (
    orm_get_product_by_id, orm_update_reserved_quantity, orm_add_saved_list,
    orm_clear_temp_list, orm_add_item_to_temp_list, orm_get_temp_list, orm_get_temp_list_department
)
from config import ARCHIVES_PATH
from database.engine import async_session
from database.models import Product

router = Router()

class ListStates(StatesGroup):
    waiting_for_quantity = State()

# --- –õ–æ–≥—ñ–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É ---

# –ù–û–í–ò–ô –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –≤—Å–µ"
@router.callback_query(F.data.startswith("add_all:"))
async def add_all_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split(":")
    product_id = int(parts[1])
    quantity = int(parts[2])

    product = await orm_get_product_by_id(product_id)
    if not product:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    allowed_department = await orm_get_temp_list_department(user_id)
    if allowed_department is not None and product.–≤—ñ–¥–¥—ñ–ª != allowed_department:
        await callback.answer(f"–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ! –£—Å—ñ —Ç–æ–≤–∞—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑ –≤—ñ–¥–¥—ñ–ª—É {allowed_department}.", show_alert=True)
        return

    await orm_add_item_to_temp_list(user_id=user_id, product_id=product_id, quantity=quantity)
    
    article_display = product.–∞—Ä—Ç–∏–∫—É–ª
    await callback.message.answer(f"–¢–æ–≤–∞—Ä `{article_display}` —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ *{quantity}* –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.")
    await callback.answer()

# –°—Ç–∞—Ä–∏–π –æ–±—Ä–æ–±–Ω–∏–∫, —Ç–µ–ø–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å"
@router.callback_query(F.data.startswith("add_custom:"))
async def add_custom_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    product_id = int(callback.data.split(":", 1)[1])
    product = await orm_get_product_by_id(product_id)
    if not product:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    allowed_department = await orm_get_temp_list_department(user_id)
    if allowed_department is not None and product.–≤—ñ–¥–¥—ñ–ª != allowed_department:
        await callback.answer(f"–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ! –£—Å—ñ —Ç–æ–≤–∞—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑ –≤—ñ–¥–¥—ñ–ª—É {allowed_department}.", show_alert=True)
        return
    
    await state.update_data(product_id=product_id, article=product.–∞—Ä—Ç–∏–∫—É–ª)
    await callback.message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä—É:\n`{product.–Ω–∞–∑–≤–∞}`")
    await state.set_state(ListStates.waiting_for_quantity)
    await callback.answer()

# --- –†–µ—à—Ç–∞ —Ñ–∞–π–ª—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω ---
@router.message(ListStates.waiting_for_quantity, F.text.isdigit())
async def process_quantity(message: Message, state: FSMContext):
    quantity = int(message.text)
    data = await state.get_data()
    await orm_add_item_to_temp_list(user_id=message.from_user.id, product_id=data.get("product_id"), quantity=quantity)
    await message.answer(f"–¢–æ–≤–∞—Ä `{data.get('article')}` —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ *{quantity}* –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.")
    await state.clear()
    
# ... (–∫–æ–¥ –¥–ª—è "–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫", "–ú—ñ–π —Å–ø–∏—Å–æ–∫" —Ç–∞ save_list_callback –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç—É—Ç) ...
@router.message(F.text == "–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫")
async def new_list_handler(message: Message):
    await orm_clear_temp_list(message.from_user.id)
    await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫. –¢–µ–ø–µ—Ä —à—É–∫–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞–≤–∞–π—Ç–µ —ó—Ö.")

@router.message(F.text == "–ú—ñ–π —Å–ø–∏—Å–æ–∫")
async def my_list_handler(message: Message):
    user_id = message.from_user.id
    temp_list = await orm_get_temp_list(user_id)
    if not temp_list:
        await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    department_id = temp_list[0].product.–≤—ñ–¥–¥—ñ–ª
    response_lines = [f"*–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ (–í—ñ–¥–¥—ñ–ª: {department_id}):*\n"]
    for i, item in enumerate(temp_list, 1):
        article = item.product.–∞—Ä—Ç–∏–∫—É–ª
        full_name = item.product.–Ω–∞–∑–≤–∞
        response_lines.append(f"{i}. `{article}` ({full_name[len(article)+3:]})\n   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: *{item.quantity}*")
    save_button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –≤—ñ–¥–∫–ª–∞—Å—Ç–∏", callback_data="save_list")]])
    await message.answer("\n".join(response_lines), reply_markup=save_button)
    
@router.callback_query(F.data == "save_list")
async def save_list_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    temp_list = await orm_get_temp_list(user_id)
    if not temp_list:
        await callback.answer("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", show_alert=True)
        return
    
    await callback.message.edit_text("–ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–∞–ª–∏—à–∫–∏ —Ç–∞ —Ñ–æ—Ä–º—É—é —Å–ø–∏—Å–∫–∏...")
    in_stock_list, surplus_list = [], []

    async with async_session() as session:
        for item in temp_list:
            product = await session.get(Product, item.product_id)
            if not product: continue
            try:
                stock_quantity = int(float(product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å))
            except (ValueError, TypeError):
                stock_quantity = 0
            available_stock = stock_quantity - (product.–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ or 0)
            if item.quantity <= available_stock:
                in_stock_list.append(item)
            else:
                if available_stock > 0:
                    in_stock_list.append(type('obj', (object,), {'product': item.product, 'quantity': available_stock})())
                surplus_list.append(type('obj', (object,), {'product': item.product, 'quantity': item.quantity - available_stock})())

    if in_stock_list:
        first_article_name = in_stock_list[0].product.–∞—Ä—Ç–∏–∫—É–ª
        file_name = f"{first_article_name}.xlsx"
        archive_dir = os.path.join(ARCHIVES_PATH, f"user_{user_id}")
        os.makedirs(archive_dir, exist_ok=True)
        file_path = os.path.join(archive_dir, file_name)
        excel_data = [{'–∞—Ä—Ç–∏–∫—É–ª': item.product.–∞—Ä—Ç–∏–∫—É–ª, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å': item.quantity} for item in in_stock_list]
        df_list = pd.DataFrame(excel_data)
        try:
            df_list.to_excel(file_path, index=False, header=False)
            async with async_session() as session:
                items_for_db = [{'article_name': item.product.–Ω–∞–∑–≤–∞, 'quantity': item.quantity} for item in in_stock_list]
                await orm_add_saved_list(user_id, file_name, file_path, items_for_db, session)
                items_to_reserve = [{'product_id': item.product.id, 'quantity': item.quantity} for item in in_stock_list]
                await orm_update_reserved_quantity(items_to_reserve, session)
                await session.commit()
            document = FSInputFile(file_path)
            await callback.message.answer_document(document, caption=f"‚úÖ **–û—Å–Ω–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫** –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        except Exception as e:
            await callback.message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É: {e}")

    if surplus_list:
        first_article_name = surplus_list[0].product.–∞—Ä—Ç–∏–∫—É–ª
        file_name = f"{first_article_name}-–ª–∏—à–∫–∏.xlsx"
        file_path = f"temp_{file_name}"
        excel_data = [{'–∞—Ä—Ç–∏–∫—É–ª': item.product.–∞—Ä—Ç–∏–∫—É–ª, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å': item.quantity} for item in surplus_list]
        df_list = pd.DataFrame(excel_data)
        try:
            df_list.to_excel(file_path, index=False, header=False)
            document = FSInputFile(file_path)
            await callback.message.answer_document(document, caption="‚ö†Ô∏è **–£–í–ê–ì–ê!**\n–¶–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫–∏—Ö **–Ω–µ –≤–∏—Å—Ç–∞—á–∏–ª–æ –Ω–∞ —Å–∫–ª–∞–¥—ñ** (–ª–∏—à–∫–∏).")
        except Exception as e:
            await callback.message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ª–∏—à–∫—ñ–≤: {e}")
        finally:
            if os.path.exists(file_path):
                os.remove(file_path)

    await orm_clear_temp_list(user_id)
    await callback.answer("–û–±—Ä–æ–±–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
import os
import logging # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
import pandas as pd
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from database.orm import orm_get_product_by_id, orm_update_reserved_quantity

router = Router()

user_lists = {}

class ListStates(StatesGroup):
    waiting_for_quantity = State()

@router.message(F.text == "–ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫")
async def new_list_handler(message: Message):
    user_id = message.from_user.id
    user_lists[user_id] = {"list": [], "first_article_name": None, "allowed_department": None}
    await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫. –¢–µ–ø–µ—Ä —à—É–∫–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞–≤–∞–π—Ç–µ —ó—Ö.")

@router.message(F.text == "–ú—ñ–π —Å–ø–∏—Å–æ–∫")
async def my_list_handler(message: Message):
    user_id = message.from_user.id
    if user_id not in user_lists or not user_lists[user_id]["list"]:
        await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    list_items = user_lists[user_id]["list"]
    department_id = user_lists[user_id]["allowed_department"]
    response_lines = [f"*–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ (–í—ñ–¥–¥—ñ–ª: {department_id}):*\n"]
    
    for i, item in enumerate(list_items, 1):
        article = item['article_name'].split(' - ')[0]
        response_lines.append(f"{i}. `{article}` ({item['article_name'][len(article)+3:]})\n   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: *{item['quantity']}*")
    
    response_text = "\n".join(response_lines)
    
    save_button = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –≤—ñ–¥–∫–ª–∞—Å—Ç–∏", callback_data="save_list")]]
    )
    await message.answer(response_text, reply_markup=save_button)

@router.callback_query(F.data.startswith("add_to_list:"))
async def add_to_list_callback(callback: CallbackQuery, state: FSMContext):
    logging.info("–£–≤—ñ–π—à–ª–∏ –≤ –æ–±—Ä–æ–±–Ω–∏–∫ add_to_list_callback") # –î–æ–¥–∞—î–º–æ –ª–æ–≥
    user_id = callback.from_user.id
    
    try:
        product_id = int(callback.data.split(":", 1)[1])
        logging.info(f"–û—Ç—Ä–∏–º–∞–ª–∏ product_id: {product_id}") # –î–æ–¥–∞—î–º–æ –ª–æ–≥
    except (ValueError, IndexError):
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ product_id –∑ callback.data: {callback.data}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    product = await orm_get_product_by_id(product_id)
    if not product:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.", show_alert=True)
        return
    
    if user_id not in user_lists:
        user_lists[user_id] = {"list": [], "first_article_name": None, "allowed_department": None}
        
    allowed_department = user_lists[user_id].get("allowed_department")
    if allowed_department is not None and product.–≤—ñ–¥–¥—ñ–ª != allowed_department:
        await callback.answer(f"–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ! –£—Å—ñ —Ç–æ–≤–∞—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑ –≤—ñ–¥–¥—ñ–ª—É {allowed_department}.", show_alert=True)
        return
    
    await state.update_data(product_id=product_id, product_name=product.–Ω–∞–∑–≤–∞)
    await state.set_state(ListStates.waiting_for_quantity)
    await callback.message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä—É:\n`{product.–Ω–∞–∑–≤–∞}`")
    await callback.answer()

@router.message(ListStates.waiting_for_quantity, F.text.isdigit())
async def process_quantity(message: Message, state: FSMContext):
    user_id = message.from_user.id
    quantity = int(message.text)
    data = await state.get_data()
    product_id = data.get("product_id")
    product_name = data.get("product_name")

    if not user_lists[user_id]["list"]:
        product = await orm_get_product_by_id(product_id)
        if product:
            user_lists[user_id]["allowed_department"] = product.–≤—ñ–¥–¥—ñ–ª
            user_lists[user_id]["first_article_name"] = product.–Ω–∞–∑–≤–∞.split(' - ')[0]

    user_lists[user_id]["list"].append({
        "product_id": product_id,
        "article_name": product_name,
        "quantity": quantity
    })
    
    article_display = product_name.split(' - ')[0]
    await message.answer(f"–¢–æ–≤–∞—Ä `{article_display}` —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ *{quantity}* –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.")
    await state.clear()

@router.callback_query(F.data == "save_list")
async def save_list_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_lists or not user_lists[user_id]["list"]:
        await callback.answer("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω—ñ—á–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏.", show_alert=True)
        return

    user_data = user_lists[user_id]
    
    excel_data = []
    for item in user_data["list"]:
        article = item['article_name'].split(' - ')[0]
        excel_data.append({'–∞—Ä—Ç–∏–∫—É–ª': article, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å': item['quantity']})
    
    df_list = pd.DataFrame(excel_data)
    file_name = f"{str(user_data['first_article_name'])}.xlsx"

    try:
        df_list.to_excel(file_name, index=False, header=False)
        document = FSInputFile(file_name)
        await callback.message.answer_document(
            document, caption=f"–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ —Ç–æ–≤–∞—Ä–∏ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ."
        )
        
        items_to_reserve = [{'product_id': item['product_id'], 'quantity': item['quantity']} for item in user_data['list']]
        await orm_update_reserved_quantity(items_to_reserve)
        
        del user_lists[user_id]
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
    finally:
        if os.path.exists(file_name):
            os.remove(file_name)
            
    await callback.answer("–°–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")